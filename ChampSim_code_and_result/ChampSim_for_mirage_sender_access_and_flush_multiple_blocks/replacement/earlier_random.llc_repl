#include "cache.h"

// initialize replacement state
void CACHE::llc_initialize_replacement()
{

}

// find replacement victim for mirage
uint32_t CACHE::llc_find_victim_mirage(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type, int part)
{
		uint32_t way = 0;
    // fill invalid line first
    for (way=part*NUM_WAY/NUM_SKEW; way<(NUM_WAY/NUM_SKEW)*(part+1); way++) 
		{
				if (block[set][way].valid && block[set][way].lru > (NUM_WAY /*/NUM_SKEW*/)-1)
        		assert(0);
        if (block[set][way].valid == false) 
				{
            DP ( if (warmup_complete[cpu]) {
            cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
            cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
            cout << dec << " lru: " << block[set][way].lru << endl; });
            break;
        }
    }

    // LRU victim
    if (way == (NUM_WAY/NUM_SKEW)*(part+1)) 
		{
				//cout << "Invalid way not found, searching among valid ways."<< endl;
        for (way=part*NUM_WAY/NUM_SKEW; way<(NUM_WAY/NUM_SKEW)*(part+1); way++) 
				{	
						//cout <<"set: "<<set<<" way: " << way << " block[set][way].lru: "<< block[set][way].lru << endl;
            if (block[set][way].lru == (NUM_WAY/NUM_SKEW)-1) 
						{
                DP ( if (warmup_complete[cpu]) {
                cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " replace set: " << set << " way: " << way;
                cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
                cout << dec << " lru: " << block[set][way].lru << endl; });
                break;
            }
        }
    }

    if (way == (NUM_WAY/NUM_SKEW)*(part+1)) 
		{
        cerr << "[" << NAME << "] " << __func__ << " no victim! set: " << set << endl;
        assert(0);
    }

	  //cout << "Returned way in set: "<< set <<" is: "<<way<< " LRU value: " << block[set][way].lru << endl;
    return way;   
}

// find replacement victim for data_LLC
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
		uint32_t way = 0;

    // fill invalid line first
    for (way=0; way<NUM_WAY; way++)
    {
        if (block[set][way].valid == false)
        {
            DP ( if (warmup_complete[cpu]) {
            cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
            cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
            cout << dec << " lru: " << block[set][way].lru << endl; });
            break;
        }
    }

		// Random victim 
    if (way == NUM_WAY)
    {
				//cout << "Invalid way not found, selecting a random way."<< endl;
        way = rand() % NUM_WAY;
    }
		
		if (way == NUM_WAY)
    {
        cerr << "[" << NAME << "] " << __func__ << " no victim! set: " << set << endl;
        assert(0);
    }
		//cout << " Dtaa array Returned way in set: "<< set <<" is: "<<way<< endl;
    return way;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

		//cout << "Nothing updated in random replacement." << endl;

    // baseline LRU
    if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
        return;

    //return lru_update(set, way);  //Nothing to update in random replacement
}

void CACHE::llc_update_replacement_state_mirage(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit, int part)
{
		    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way; 
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

    // baseline LRU
    if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
        return;
		
		//cout << "======================START tag array repl state updation =========================="<<endl;
		//cout <<"Outside " <<"set: "<<set <<" way: "<<way <<" block[set][way].lru: "<<block[set][way].lru<< endl;
    // update lru replacement state
    
		for (uint32_t i = part*NUM_WAY/NUM_SKEW; i < (NUM_WAY/NUM_SKEW)*(part+1); i++) 
    {
				//cout <<" out if block[set][i].valid: "<<(int)block[set][i].valid<< " set: "<<set << " i: "<<i<<" block[set][i].lru: "<<block[set][i].lru<<" way: "<<way <<" block[set][way].lru: "<<block[set][way].lru<< endl;
        
				if (block[set][i].lru < block[set][way].lru && block[set][i].valid ) 
        {		
						//cout <<"block[set][i].valid: "<<(int)block[set][i].valid<< " set: "<<set << " i: "<<i<<" block[set][i].lru: "<<block[set][i].lru<<" way: "<<way <<" block[set][way].lru: "<<block[set][way].lru<< endl;
				
        		if(block[set][i].valid == 0) 
								assert(0);

            block[set][i].lru++;
						//cout <<"block[set][i].valid: "<<(int)block[set][i].valid<< " set: "<<set << " i: "<<i<<" block[set][i].lru: "<<block[set][i].lru<<" way: "<<way <<" block[set][way].lru: "<<block[set][way].lru<< endl;
        }
    }
    block[set][way].lru = 0; // promote to the MRU position
		//cout <<" way: "<<way <<" block[set][way].lru: "<<block[set][way].lru<< endl;
		//cout << "=========================END tag array repl state updation ======================="<<endl;
}

void CACHE::llc_update_replacement_state_inv_block(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, /*uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit,*/ int part)
{
    /*    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS"; */

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

		//cout << "part is: " << part << endl;

    // update lru replacement state
    for (uint32_t i = part*NUM_WAY/NUM_SKEW; i < (NUM_WAY/NUM_SKEW)*(part+1); i++)
    {
				//cout <<"Previous lru value "<<"block[set][i].lru: "<<(int)block[set][i].lru<< " set: " << set << " i: " << i << " block[set][i].lru: " << block[set][i].lru<<" way: " << way << " block[set][way].valid: " << (int )block[set][way].valid << endl;
        
				if (block[set][i].lru > block[set][way].lru)
        {  
            block[set][i].lru--;
						//cout <<"Modified lru value "<<"block[set][i].lru: "<<(int)block[set][i].lru<< " set: " << set << " i: " << i << " block[set][i].lru: " << block[set][i].lru<<" way: " << way << " block[set][way].valid: " <<(int) block[set][way].valid << endl;
        }
	
    }
		// promote to the LRU position
    block[set][way].lru = NUM_WAY-1;  //((NUM_WAY/NUM_SKEW)-1);  // LRU value is initialized as way number, hence giving LRU as maximum possible value.
		//cout << "updated invalidated set: "<< set <<" and way: "<<way<< " to LRU value: " << NUM_WAY-1 << endl;
}

void CACHE::llc_replacement_final_stats()
{

}
